let cardData = null;
let currentCards = [];
let allFlipped = false;

// Chargement des donn√©es depuis le fichier JSON
async function loadCardData() {
    try {
        console.log('Chargement du fichier cartes.json...');
        const response = await fetch('json/cartes.json');
        
        if (!response.ok) {
            throw new Error(`Erreur HTTP: ${response.status}`);
        }
        
        cardData = await response.json();
        console.log('Donn√©es charg√©es avec succ√®s:', cardData);
        return true;
    } catch (error) {
        console.error('Erreur lors du chargement des donn√©es:', error);
        
        // Fallback: utiliser des donn√©es de d√©monstration
        console.log('Utilisation des donn√©es de d√©monstration...');
        cardData = {
            defis: {
                category: "D√©fis",
                icon: "üéØ",
                cards: [
                    {
                        title: "D√©fi par D√©faut",
                        content: "Rechargez la page pour essayer de charger cartes.json"
                    }
                ]
            },
            fois: {
                category: "Fois",
                icon: "üí≠",
                cards: [
                    {
                        title: "Question par D√©faut",
                        content: "Placez le fichier cartes.json dans le m√™me dossier que cette page"
                    }
                ]
            },
            bonus: {
                category: "Bonus",
                icon: "üéÅ",
                cards: [
                    {
                        title: "Bonus par D√©faut",
                        content: "V√©rifiez que le serveur peut servir les fichiers JSON"
                    }
                ]
            }
        };
        return false;
    }
}

// Initialisation de l'application
async function initApp() {
    console.log('Initialisation de l\'app...');
    
    // Charger les donn√©es JSON
    const success = await loadCardData();
    
    if (success) {
        console.log('‚úÖ Donn√©es JSON charg√©es depuis cartes.json');
    } else {
        console.log('‚ö†Ô∏è Utilisation des donn√©es de fallback');
    }
    
    // Charger et afficher les cartes
    loadCards();
}

// Charger les cartes
function loadCards() {
    if (!cardData) {
        console.error('Aucune donn√©e de carte disponible');
        return;
    }

    const categories = ['defis', 'fois', 'bonus'];
    currentCards = [];

    categories.forEach(categoryKey => {
        const categoryData = cardData[categoryKey];
        if (categoryData && categoryData.cards && categoryData.cards.length > 0) {
            const randomCard = categoryData.cards[Math.floor(Math.random() * categoryData.cards.length)];
            
            currentCards.push({
                category: categoryData.category,
                icon: categoryData.icon,
                title: randomCard.title,
                content: randomCard.content,
                categoryClass: categoryKey,
                flipped: false
            });
        } else {
            console.warn(`Aucune carte trouv√©e pour la cat√©gorie: ${categoryKey}`);
        }
    });

    renderCards();
}

// Afficher les cartes avec Bootstrap
function renderCards() {
    const container = document.getElementById('cardsContainer');
    if (!container) {
        console.error('Container cardsContainer non trouv√©');
        return;
    }
    
    container.innerHTML = '';

    currentCards.forEach((card, index) => {
        const cardHtml = `
            <div class="card-flip-container ${card.categoryClass}">
                <div class="card-flip" data-index="${index}" onclick="flipCard(${index})">
                    <div class="card-flip-front card">
                        <div class="card-category">${card.category}</div>
                        <div class="card-icon">${card.icon}</div>
                    </div>
                    <div class="card-flip-back card">
                        <div class="card-title">${card.title}</div>
                        <div class="card-content">${card.content}</div>
                    </div>
                </div>
            </div>
        `;
        
        container.insertAdjacentHTML('beforeend', cardHtml);
    });
    
    console.log('Cartes rendues, ajout des √©v√©nements...');
    // Ajouter les √©v√©nements apr√®s rendu
    addEventListeners();
}

// Ajouter les √©v√©nements de clic
function addEventListeners() {
    const cardElements = document.querySelectorAll('.card-flip');
    console.log(`Ajout d'√©v√©nements pour ${cardElements.length} cartes`);
    
    cardElements.forEach((cardElement, index) => {
        // Supprimer les anciens √©v√©nements
        const newCardElement = cardElement.cloneNode(true);
        cardElement.parentNode.replaceChild(newCardElement, cardElement);
        
        // Ajouter les nouveaux √©v√©nements
        newCardElement.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log(`Clic d√©tect√© sur carte ${index}`);
            flipCard(index);
        });
        
        // √âv√©nement tactile pour mobile
        newCardElement.addEventListener('touchend', function(e) {
            e.preventDefault();
            e.stopPropagation();
            console.log(`Touch d√©tect√© sur carte ${index}`);
            flipCard(index);
        });
    });
}

// Retourner une carte - Version simplifi√©e
function flipCard(index) {
    console.log(`Tentative de retournement carte ${index}`);
    
    if (index < 0 || index >= currentCards.length) {
        console.error(`Index invalide: ${index}`);
        return;
    }
    
    const cardElement = document.querySelector(`[data-index="${index}"]`);
    
    if (!cardElement) {
        console.error(`√âl√©ment carte non trouv√© pour index ${index}`);
        return;
    }
    
    console.log(`Retournement carte ${index} - √âtat actuel: ${currentCards[index].flipped}`);
    
    // Basculer la classe
    cardElement.classList.toggle('flipped');
    currentCards[index].flipped = !currentCards[index].flipped;
    
    console.log(`Carte ${index} retourn√©e - Nouvel √©tat: ${currentCards[index].flipped}`);
    
    // Vibration tactile sur mobile
    if (navigator.vibrate) {
        navigator.vibrate(50);
    }
}

// M√©langer les cartes
function shuffleCards() {
    console.log('M√©lange des cartes...');
    if (!cardData) {
        console.error('Impossible de m√©langer: donn√©es non charg√©es');
        return;
    }
    
    // R√©initialiser d'abord
    resetCards();
    // Puis recharger
    loadCards();
}

// R√©initialiser les cartes
function resetCards() {
    console.log('R√©initialisation...');
    const cards = document.querySelectorAll('.card-flip');
    cards.forEach((card, index) => {
        card.classList.remove('flipped');
        if (currentCards[index]) {
            currentCards[index].flipped = false;
        }
    });
    allFlipped = false;
}

// Retourner toutes les cartes
function flipAllCards() {
    console.log('Retournement de toutes les cartes...');
    const cards = document.querySelectorAll('.card-flip');
    allFlipped = !allFlipped;
    
    cards.forEach((card, index) => {
        if (allFlipped) {
            card.classList.add('flipped');
            if (currentCards[index]) {
                currentCards[index].flipped = true;
            }
        } else {
            card.classList.remove('flipped');
            if (currentCards[index]) {
                currentCards[index].flipped = false;
            }
        }
    });
}

// Initialiser au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM charg√©, initialisation...');
    setTimeout(initApp, 500);
});

// Gestion de l'orientation mobile
window.addEventListener('orientationchange', function() {
    setTimeout(() => {
        window.scrollTo(0, 0);
        // R√©ajouter les √©v√©nements apr√®s changement d'orientation
        if (currentCards.length > 0) {
            addEventListeners();
        }
    }, 100);
});

// Fonction de test pour d√©bugger
function testFlip() {
    console.log('Test de retournement...');
    if (currentCards.length > 0) {
        flipCard(0);
    } else {
        console.log('Aucune carte disponible pour le test');
    }
}

// Ajouter la fonction de test au window pour pouvoir l'appeler depuis la console
window.testFlip = testFlip;
window.flipCard = flipCard;